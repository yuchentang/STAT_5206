?lubridate
??lubridate
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
df <- read_csv("data/USH00020080.prcp.csv")
df <- read_csv("data/USH00020080.prcp.csv")
df <- df %>% select(-starts_with("ds"))
df_type <- c("dm", "qc", "value")
dqv <- map(df_type, function(dt) df %>% select(starts_with(dt)))
head(dqv[[1]])
head(dqv[[2]])
head(dqv[[3]])
head(dqv[[1]])
head(dqv[[2]])
head(dqv[[3]])
sapply(dqv, dim)
?sapply
cond <- dqv[[1]] == "E" | !is.na(dqv[[2]]) | dqv[[3]] == -9999
dqv[[3]][cond] <- NA
head(df)
names(df)
cond <- dqv[[1]] == "E" | !is.na(dqv[[2]]) | dqv[[3]] == -9999
dqv[[3]][cond] <- NA
df <- bind_cols(df %>% select(year, id), dqv[[3]])
names(df)
?bind_cols
process_df <- function(fn){
df <- read.csv(fn)
df <- df %>% select(-starts_with("ds"))
df_type <- c("dm", "qc", "value")
dqv <- map(df_type, function(dt) df %>% select(starts_with(dt)))
cond <- dqv[[1]] == "E" | !is.na(dqv[[2]]) | dqv[[3]] == -9999
dqv[[3]][cond] <- NA
df <- cbind(df %>% select(year, id), dqv[[3]] / 10)
return(df)
}
dat_files <- list.files(path='data', pattern="USH.*csv", full.names = TRUE)
head(dat_files)
dfs <- map_dfr(dat_files, process_df)
head(dfs)
?across
norm_df <- dfs %>%
group_by(id) %>%
mutate(across(starts_with("value"), scale)) %>%
ungroup()
head(norm_df)
across(starts_with("value"), scale)
across(dfs, starts_with("value"), scale)
norm_df <- dfs %>%
group_by(id) %>%
mutate(across(starts_with("value"), scale)) %>%
ungroup()
head(norm_df)
long_dat <- norm_df %>%
pivot_longer(
cols = starts_with("value"),
names_to = "month",
names_prefix = "value",
values_to = "prcp") %>%
mutate(
year_mon = make_date(year, as.numeric(month) + 1),
prcp = as.numeric(prcp)
) %>%
select(id, year_mon, prcp) %>%
complete(id, year_mon) %>%
arrange(year_mon, id)
tail(long_dat)
ï¼Ÿcomplete
?complete
df <- tibble(
group = c(1:2, 1),
item_id = c(1:2, 2),
item_name = c("a", "b", "b"),
value1 = 1:3,
value2 = 4:6
)
df %>% complete(group, nesting(item_id, item_name))
df
?nesting
?slice
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
rm()
?rm
rm(list = ls())
library(tidyverse)
airports <- read_csv("T_100_MARKET_DOM_INT_2019.csv")
tibble(1:3)
tibble(1:3, 1:3)
tibble(c(1:3, 1:3))
tibble(c(1:3, 1:3), nrow = 3)
tibble(1:6, nrow = 3)
?tibble
tibble(1:6, rows = 3)
tibble(1:6, .rows = 3)
?tibble
?tibble
matrix(1:6, nrow = 3)
as_tibble(matrix(1:6, nrow = 3))
as.tibble(matrix(1:6, nrow = 3))
tibble(matrix(1:6, nrow = 3))
df <- tibble(matrix(1:6, nrow = 3))
df
matrix(1:6, nrow = 3)
df <- tibble(matrix(1:6, nrow = 3), row.names())
?tibble
?as_tibble
df <- tibble(matrix(1:6, nrow = 3), c("a", "b")
)
df
df <- tibble(matrix(1:6, nrow = 3), c("a", "b"))
?as_tibble
df <- tibble(matrix(1:6, nrow = 3), rownames = c("a", "b"))
df <- tibble(matrix(1:6, nrow = 3), rownames = c("a", "b", "c"))
df
names(df)
?as_tibble
?as_tibble
df <- tibble(matrix(1:6, nrow = 3), .name_repair  = c("a", "b", "c"))
df <- tibble(matrix(1:6, nrow = 3), colnames = c("a", "b", "c"))
df
a <- matrix(1:6, nrow = 3)
a
tibble(a)
tibble(a, names("a", "b"))
tibble(a, names = c("a", "b")
)
?tibble
df <- as_tibble(a)
df
names(df) <- c("a", "b")
df
df[4]
df[4] <- c(1,2)
rbind(df, 1:2)
df <- rbind(df, c(1, 4))
df
unique()
unique(df)
?merge
uthors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authorN <- within(authors, { name <- surname; rm(surname) })
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authorN <- within(authors, { name <- surname; rm(surname) })
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
books
authorN
authors
(m0 <- merge(authorN, books))
authorN
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
library(tidyverse)
airports <- read_csv("T_100_MARKET_DOM_INT_2019.csv", stringAsFactors = FALSE)
df <- read_csv("T_100_MARKET_DOM_INT_2019.csv")
head(df)
length(df)
nrows(df)
nrow(df)
nrow(df)
nrow(df)
out <- df %>%
filter(ORIGIN_COUNTRY != "US" | DEST_COUNTRY != "US") %>%
transmute(foreign_country = ifelse(ORIGIN_COUNTRY == 'US', DEST_COUNTRY, ORIGIN_COUNTRY)) %>%
group_by(foreign_country) %>%
summarize(n())
out
dest_countries <- df %>%
filter(ORIGIN_COUNTRY == "US", DEST_COUNTRY != "US") %>%
select(DEST_COUNTRY) %>% unique()
dest_countries
df <- df %>%
select(-ends_with("AIRPORT_ID")) %>%
unique()
names(df)
from_wuh <- df[df$ORIGIN == "WUH", "DEST"]
from_mxp <- df[df$ORIGIN == "MXP", "DEST"]
from_hotspot <- unique(c(from_wuh, from_mxp))
length(from_hotspot)
from_wuh <- df[df$ORIGIN == "WUH", "DEST"]
from_mxp <- df[df$ORIGIN == "MXP", "DEST"]
from_hotspot <- unique(c(from_wuh, from_mxp))
length(from_hotspot)
df$ORIGIN == "WUH", "DEST"
df$ORIGIN == "WUH"
df[df$ORIGIN == "WUH", "DEST"]
df[df$ORIGIN == "WUH"]
df
df[df$ORIGIN == "WUH"]
df
nrow(df)
length(df$ORIGIN == "WUH")
df[df$ORIGIN == "WUH"]
df[df$ORIGIN == "WUH", ]
class(from_wuh)
c(from_wuh, from_mxp)
from_wuh
c(from_wuh, from_mxp)
class(c(from_wuh, from_mxp))
class(from_wuh[1])
class(from_wuh[[1]])
from_wuh[[1]]
from_wuh[1]
from_wuh
from_hotspot <- unique(c(from_wuh[[1]], from_mxp[[1]]))
length(from_hotspot)
c(1:3, 1:4)
us_dom <- df %>%
filter(ORIGIN_COUNTRY == "US",
DEST_COUNTRY == "US") %>%
select(ORIGIN, DEST) %>% unique()
us_dom_lock <- us_dom %>% filter(!(ORIGIN %in% from_hotspot | DEST %in% from_hotspot))
View(us_dom_lock)
us_dom_lock <- us_dom %>% filter(!(ORIGIN %in% from_hotspot | DEST %in% from_hotspot))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
jobs <- jsonlite::read_json("indeed_job_descs.json")
rm(list = ls())
jobs <- jsonlite::read_json("indeed_job_descs.json")
### Problem 0
- Please describe the data structure to your labmates.
- Which job titles were collected?
- Please print out one job description, what do you notice about its formatting?
class(jobs)
length(jobs)
jobs[[1]]
names(jobs[[1]])
jobs[[1]][["request_params"]]
names(jobs[[1]][["job_descriptions"]])
class(jobs[[1]][["job_descriptions"]][[1]])
jobs[[1]][["job_descriptions"]][[1]]
titles <- sapply(jobs, function(x) x$request_params$q)
titles
jobs[[1]][["request_params"]]
titles <- map(jobs, function(x) x$request_params$q)
titles
titles <- map_chr(jobs, function(x) x$request_params$q)
titles
sapply(jobs, function(x) x$request_params$q)
titles == sapply(jobs, function(x) x$request_params$q)
all(titles == sapply(jobs, function(x) x$request_params$q))
#OR: titles <- sapply(jobs, function(x) x$request_params$q)
jobs[[1]][['job_descriptions']][[2]]
#OR: titles <- sapply(jobs, function(x) x$request_params$q)
jobs[[1]][['job_descriptions']][[1]]
#OR: titles <- sapply(jobs, function(x) x$request_params$q)
jobs[[1]][['job_descriptions']][[2]]
doc <- jobs[titles == "data+scientist"][[1]][['job_descriptions']][[3]]
doc
find_skills <- function(skill, doc){
#I want "high-quality", "R&D", "D3" to count as tokens
tokens <- strsplit(doc, "[^a-zA-Z0-9\\-_&]")[[1]]
return(skill %in% tokens)
}
names(jobs) <- titles
titles
names(jobs)
jobs <- jsonlite::read_json("indeed_job_descs.json")
names(jobs)
names(jobs) <- titles
perc_python <- sapply(jobs, function(job) mean(sapply(job[['job_descriptions']], function(jd) find_skills("Python", jd))))
cbind(perc_python, perc_R, perc_R > perc_python)
perc_R <- sapply(jobs, function(job) mean(sapply(job[['job_descriptions']], function(jd) find_skills("R", jd))))
cbind(perc_python, perc_R, perc_R > perc_python)
?sapply
?apply
sapply(1:3, ~ .x + 1)
sapply(1:3, function(x) x + 1)
map(1:3, function(x) x + 1)
map_dbl(1:3, function(x) x + 1)
apply(1:3, function(x) x + 1)
doc <- jobs[titles == "data+scientist"][[1]][['job_descriptions']][[3]]
doc
find_skills <- function(skill, doc){
#I want "high-quality", "R&D", "D3" to count as tokens
tokens <- strsplit(doc, "[^a-zA-Z0-9\\-_&]")[[1]]
return(skill %in% tokens)
}
find_skills("R", doc)
tokens
find_skills <- function(skill, doc){
#I want "high-quality", "R&D", "D3" to count as tokens
tokens <- strsplit(doc, "[^a-zA-Z0-9\\-_&]")[[1]]
print(tokens)
return(skill %in% tokens)
}
find_skills("R", doc)
?strsplit
strsplit("R&D", "[^a-zA-Z0-9\\-_&]")[[1]]
strsplit("R&D")[[1]]
strsplit("R&D", ".")[[1]]
?str_sub
x <- "BBCDEF"
str_sub(x, 1, 1) <- "A"; x
str_view(c("apple", "pear"), "an")
library(stringr)
str_view(c("apple", "pear"), "an")
library(stringr)
str_view(c("apple", "pear"), "an")
install.packages("stringr")
install.packages("stringr")
str_view(c("apple", "pear"), "an")
?str_view
??str_view
library(stringr)
str_view(c("apple", "pear"), "an")
install.packages("htmlwidgets")
str_view(c("apple", "pear"), "an")
str_view(c("apple", "pear"), "ap")
str_view(c("apple", "pear"), ".a.")
str_view(c("apple", "pear"), "a.")
?strsplit
strsplit("improve R&D", "[^a-zA-Z0-9\\-_&]")[[1]]
strsplit("improve R&D", "[^a-zA-Z0-9\\-_]")[[1]]
strsplit("improve R&D", "[^a-zA-Z0-9\\-_&]")[[1]]
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
strsplit("apple", NULL)
strsplit("appl e", NULL)
strsplit("appl e", " ")
strsplit("i have a pen", " ")
strsplit("i have a pen", NULL)
strsplit("i have a pen", "[^a-zA-Z0-9\\-_&]")[[1]]
strsplit("i have a pen", "[^a-zA-Z0-9\\-_&]")
strsplit("i have a pen", "[^a-zA-Z0-9\\-_&]")
tolower("d")
tolower("F")
tolower(A:C)
?gsub
non_word <- "[^a-zA-Z0-9\\-_&]"
skill_mod <- gsub(non_word, "_", tolower(skill))
non_word <- "[^a-zA-Z0-9\\-_&]"
skill_mod <- gsub(non_word, "_", tolower("python"))
skill_mod
non_word <- "[^a-zA-Z0-9\\-_&]"
skill_mod <- gsub(non_word, "_", tolower("R"))
skill_mod
non_word <- "[^a-zA-Z0-9\\-_&]"
skill_mod <- gsub(non_word, "_", tolower("machine learning"))
skill_mod
?which
which(1:3 ,1)
which(1:3, 1)
which(1:3, function(x) .x == 1)
( m <- matrix(1:12, 3, 4) )
div.3 <- m %% 3 == 0
which(div.3)
which(div.3, arr.ind = TRUE)
rownames(m) <- paste("Case", 1:3, sep = "_")
which(m %% 5 == 0, arr.ind = TRUE)
